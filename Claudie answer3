```python
# backend/car_dealer_crm/settings.py
import os
from datetime import timedelta
from pathlib import Path

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.environ.get('SECRET_KEY', 'django-insecure-key')

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = os.environ.get('DEBUG', 'False') == 'True'

ALLOWED_HOSTS = os.environ.get('ALLOWED_HOSTS', 'localhost,127.0.0.1').split(',')

# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    
    # Сторонние приложения
    'rest_framework',
    'rest_framework_simplejwt',
    'corsheaders',
    'django_filters',
    'drf_yasg',
    'django_celery_beat',
    'django_extensions',
    
    # Наши приложения
    'core',
    'customers',
    'vehicles',
    'sales',
    'marketing',
    'service',
    'finance',
    'analytics',
    'employees',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'car_dealer_crm.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'car_dealer_crm.wsgi.application'

# Database
# https://docs.djangoproject.com/en/4.2/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql',
        'NAME': os.environ.get('DB_NAME', 'car_dealer_crm'),
        'USER': os.environ.get('DB_USER', 'postgres'),
        'PASSWORD': os.environ.get('DB_PASSWORD', 'postgres'),
        'HOST': os.environ.get('DB_HOST', 'db'),
        'PORT': os.environ.get('DB_PORT', '5432'),
    }
}

# Password validation
# https://docs.djangoproject.com/en/4.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

# Internationalization
# https://docs.djangoproject.com/en/4.2/topics/i18n/

LANGUAGE_CODE = 'ru-ru'

TIME_ZONE = 'Europe/Moscow'

USE_I18N = True

USE_TZ = True

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.2/howto/static-files/

STATIC_URL = 'static/'
STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')

MEDIA_URL = 'media/'
MEDIA_ROOT = os.path.join(BASE_DIR, 'media')

# Default primary key field type
# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# REST Framework
REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': (
        'rest_framework_simplejwt.authentication.JWTAuthentication',
    ),
    'DEFAULT_PERMISSION_CLASSES': [
        'rest_framework.permissions.IsAuthenticated',
    ],
    'DEFAULT_PAGINATION_CLASS': 'rest_framework.pagination.PageNumberPagination',
    'PAGE_SIZE': 25,
    'DEFAULT_FILTER_BACKENDS': [
        'django_filters.rest_framework.DjangoFilterBackend',
        'rest_framework.filters.SearchFilter',
        'rest_framework.filters.OrderingFilter',
    ],
}

# JWT Settings
SIMPLE_JWT = {
    'ACCESS_TOKEN_LIFETIME': timedelta(hours=int(os.environ.get('JWT_ACCESS_TOKEN_LIFETIME', 1))),
    'REFRESH_TOKEN_LIFETIME': timedelta(hours=int(os.environ.get('JWT_REFRESH_TOKEN_LIFETIME', 24))),
    'ROTATE_REFRESH_TOKENS': True,
    'BLACKLIST_AFTER_ROTATION': True,
    'AUTH_HEADER_TYPES': ('Bearer',),
}

# CORS Settings
CORS_ALLOW_ALL_ORIGINS = DEBUG
CORS_ALLOWED_ORIGINS = [
    'http://localhost:3000',
    'http://127.0.0.1:3000',
]

# Celery Settings
CELERY_BROKER_URL = os.environ.get('REDIS_URL', 'redis://redis:6379/0')
CELERY_RESULT_BACKEND = os.environ.get('REDIS_URL', 'redis://redis:6379/0')
CELERY_ACCEPT_CONTENT = ['json']
CELERY_TASK_SERIALIZER = 'json'
CELERY_RESULT_SERIALIZER = 'json'
CELERY_TIMEZONE = TIME_ZONE

# Логирование
LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        'verbose': {
            'format': '{levelname} {asctime} {module} {process:d} {thread:d} {message}',
            'style': '{',
        },
        'simple': {
            'format': '{levelname} {message}',
            'style': '{',
        },
    },
    'handlers': {
        'console': {
            'level': 'INFO',
            'class': 'logging.StreamHandler',
            'formatter': 'verbose',
        },
        'file': {
            'level': 'INFO',
            'class': 'logging.FileHandler',
            'filename': os.path.join(BASE_DIR, 'logs', 'django.log'),
            'formatter': 'verbose',
        },
    },
    'loggers': {
        'django': {
            'handlers': ['console', 'file'],
            'level': 'INFO',
            'propagate': True,
        },
    },
}

# Создание директории для логов
os.makedirs(os.path.join(BASE_DIR, 'logs'), exist_ok=True)

```

```python
# backend/car_dealer_crm/urls.py
from django.contrib import admin
from django.urls import path, include
from django.conf import settings
from django.conf.urls.static import static
from rest_framework import permissions
from drf_yasg.views import get_schema_view
from drf_yasg import openapi

schema_view = get_schema_view(
    openapi.Info(
        title="Car Dealer CRM API",
        default_version='v1',
        description="API для CRM-системы автодилера",
        terms_of_service="https://www.google.com/policies/terms/",
        contact=openapi.Contact(email="contact@cardealer.com"),
        license=openapi.License(name="BSD License"),
    ),
    public=True,
    permission_classes=[permissions.AllowAny],
)

api_urlpatterns = [
    path('customers/', include('customers.api.urls')),
    path('vehicles/', include('vehicles.api.urls')),
    path('sales/', include('sales.api.urls')),
    path('marketing/', include('marketing.api.urls')),
    path('service/', include('service.api.urls')),
    path('finance/', include('finance.api.urls')),
    path('analytics/', include('analytics.api.urls')),
    path('employees/', include('employees.api.urls')),
    path('core/', include('core.api.urls')),
]

urlpatterns = [
    path('admin/', admin.site.urls),
    path('api/v1/', include(api_urlpatterns)),
    path('swagger/', schema_view.with_ui('swagger', cache_timeout=0), name='schema-swagger-ui'),
    path('redoc/', schema_view.with_ui('redoc', cache_timeout=0), name='schema-redoc'),
]

if settings.DEBUG:
    urlpatterns += static(settings.MEDIA_URL, document_root=settings.MEDIA_ROOT)
    urlpatterns += static(settings.STATIC_URL, document_root=settings.STATIC_ROOT)

```

```python
# backend/core/models.py
from django.db import models
from django.contrib.auth.models import User
from django.utils.translation import gettext_lazy as _

class TimeStampedModel(models.Model):
    """
    Абстрактная модель, которая добавляет поля created и updated
    """
    created_at = models.DateTimeField(auto_now_add=True, verbose_name=_('Дата создания'))
    updated_at = models.DateTimeField(auto_now=True, verbose_name=_('Дата обновления'))

    class Meta:
        abstract = True

class BaseAddress(TimeStampedModel):
    """
    Базовая модель для адресов
    """
    country = models.CharField(max_length=100, verbose_name=_('Страна'))
    region = models.CharField(max_length=100, verbose_name=_('Область/край'))
    city = models.CharField(max_length=100, verbose_name=_('Город'))
    street = models.CharField(max_length=200, verbose_name=_('Улица'))
    house = models.CharField(max_length=20, verbose_name=_('Дом'))
    apartment = models.CharField(max_length=20, blank=True, null=True, verbose_name=_('Квартира/офис'))
    postal_code = models.CharField(max_length=20, verbose_name=_('Почтовый индекс'))
    
    class Meta:
        abstract = True
        verbose_name = _('Адрес')
        verbose_name_plural = _('Адреса')

class ContactInfo(TimeStampedModel):
    """
    Базовая модель для контактной информации
    """
    phone_primary = models.CharField(max_length=20, verbose_name=_('Основной телефон'))
    phone_secondary = models.CharField(max_length=20, blank=True, null=True, verbose_name=_('Дополнительный телефон'))
    email = models.EmailField(verbose_name=_('Email'))
    
    class Meta:
        abstract = True
        verbose_name = _('Контактная информация')
        verbose_name_plural = _('Контактная информация')

class ActivityLog(TimeStampedModel):
    """
    Модель для логирования действий в системе
    """
    ACTION_CHOICES = (
        ('create', _('Создание')),
        ('update', _('Обновление')),
        ('delete', _('Удаление')),
        ('view', _('Просмотр')),
        ('other', _('Другое')),
    )
    
    user = models.ForeignKey(User, on_delete=models.CASCADE, verbose_name=_('Пользователь'))
    action = models.CharField(max_length=10, choices=ACTION_CHOICES, verbose_name=_('Действие'))
    content_type = models.CharField(max_length=100, verbose_name=_('Тип контента'))
    object_id = models.CharField(max_length=100, verbose_name=_('ID объекта'))
    description = models.TextField(blank=True, null=True, verbose_name=_('Описание'))
    
    class Meta:
        verbose_name = _('Лог активности')
        verbose_name_plural = _('Логи активности')
        ordering = ['-created_at']
    
    def __str__(self):
        return f"{self.user} - {self.get_action_display()} - {self.content_type}:{self.object_id}"

```

```python
# backend/customers/models.py
from django.db import models
from django.utils.translation import gettext_lazy as _
from core.models import TimeStampedModel, BaseAddress, ContactInfo

class Customer(TimeStampedModel, ContactInfo):
    """
    Модель клиента
    """
    GENDER_CHOICES = (
        ('male', _('Мужской')),
        ('female', _('Женский')),
    )
    
    MARITAL_STATUS_CHOICES = (
        ('single', _('Холост/Не замужем')),
        ('married', _('Женат/Замужем')),
        ('divorced', _('Разведен(а)')),
        ('widowed', _('Вдовец/Вдова')),
    )
    
    INCOME_LEVEL_CHOICES = (
        ('low', _('Низкий')),
        ('medium', _('Средний')),
        ('high', _('Высокий')),
        ('very_high', _('Очень высокий')),
    )
    
    # Основная информация
    first_name = models.CharField(max_length=100, verbose_name=_('Имя'))
    last_name = models.CharField(max_length=100, verbose_name=_('Фамилия'))
    middle_name = models.CharField(max_length=100, blank=True, null=True, verbose_name=_('Отчество'))
    
    # Демографические данные
    birth_date = models.DateField(blank=True, null=True, verbose_name=_('Дата рождения'))
    gender = models.CharField(max_length=10, choices=GENDER_CHOICES, blank=True, null=True, verbose_name=_('Пол'))
    marital_status =
```
```python
# backend/customers/models.py
from django.db import models
from django.utils.translation import gettext_lazy as _
from core.models import TimeStampedModel, BaseAddress, ContactInfo

class Customer(TimeStampedModel, ContactInfo):
    """
    Модель клиента
    """
    GENDER_CHOICES = (
        ('male', _('Мужской')),
        ('female', _('Женский')),
    )
    
    MARITAL_STATUS_CHOICES = (
        ('single', _('Холост/Не замужем')),
        ('married', _('Женат/Замужем')),
        ('divorced', _('Разведен(а)')),
        ('widowed', _('Вдовец/Вдова')),
    )
    
    INCOME_LEVEL_CHOICES = (
        ('low', _('Низкий')),
        ('medium', _('Средний')),
        ('high', _('Высокий')),
        ('very_high', _('Очень высокий')),
    )
    
    # Основная информация
    first_name = models.CharField(max_length=100, verbose_name=_('Имя'))
    last_name = models.CharField(max_length=100, verbose_name=_('Фамилия'))
    middle_name = models.CharField(max_length=100, blank=True, null=True, verbose_name=_('Отчество'))
    
    # Демографические данные
    birth_date = models.DateField(blank=True, null=True, verbose_name=_('Дата рождения'))
    gender = models.CharField(max_length=10, choices=GENDER_CHOICES, blank=True, null=True, verbose_name=_('Пол'))
    marital_status = models.CharField(max_length=10, choices=MARITAL_STATUS_CHOICES, blank=True, null=True, verbose_name=_('Семейное положение'))
    income_level = models.CharField(max_length=10, choices=INCOME_LEVEL_CHOICES, blank=True, null=True, verbose_name=_('Уровень дохода'))
    
    # Дополнительные поля
    notes = models.TextField(blank=True, null=True, verbose_name=_('Примечания'))
    
    class Meta:
        verbose_name = _('Клиент')
        verbose_name_plural = _('Клиенты')
        ordering = ['last_name', 'first_name']
    
    def __str__(self):
        return f"{self.last_name} {self.first_name}"
    
    @property
    def full_name(self):
        if self.middle_name:
            return f"{self.last_name} {self.first_name} {self.middle_name}"
        return f"{self.last_name} {self.first_name}"


class CustomerAddress(BaseAddress):
    """
    Адрес клиента
    """
    ADDRESS_TYPE_CHOICES = (
        ('home', _('Домашний')),
        ('work', _('Рабочий')),
        ('other', _('Другой')),
    )
    
    customer = models.ForeignKey(Customer, on_delete=models.CASCADE, related_name='addresses', verbose_name=_('Клиент'))
    address_type = models.CharField(max_length=10, choices=ADDRESS_TYPE_CHOICES, verbose_name=_('Тип адреса'))
    is_primary = models.BooleanField(default=False, verbose_name=_('Основной адрес'))
    
    class Meta:
        verbose_name = _('Адрес клиента')
        verbose_name_plural = _('Адреса клиентов')
        ordering = ['-is_primary']
    
    def __str__(self):
        return f"{self.customer} - {self.get_address_type_display()}"


class CustomerPreference(TimeStampedModel):
    """
    Предпочтения клиента
    """
    customer = models.OneToOneField(Customer, on_delete=models.CASCADE, related_name='preferences', verbose_name=_('Клиент'))
    preferred_brands = models.CharField(max_length=255, blank=True, null=True, verbose_name=_('Предпочитаемые марки'))
    preferred_models = models.CharField(max_length=255, blank=True, null=True, verbose_name=_('Предпочитаемые модели'))
    interested_in_sportcars = models.BooleanField(default=False, verbose_name=_('Интерес к спорткарам'))
    interested_in_suvs = models.BooleanField(default=False, verbose_name=_('Интерес к внедорожникам'))
    interested_in_electric = models.BooleanField(default=False, verbose_name=_('Интерес к электромобилям'))
    
    class Meta:
        verbose_name = _('Предпочтения клиента')
        verbose_name_plural = _('Предпочтения клиентов')
    
    def __str__(self):
        return f"Предпочтения {self.customer}"


class CustomerInteraction(TimeStampedModel):
    """
    История взаимодействий с клиентом
    """
    INTERACTION_TYPE_CHOICES = (
        ('call', _('Звонок')),
        ('email', _('Email')),
        ('meeting', _('Встреча')),
        ('support', _('Запрос в поддержку')),
        ('other', _('Другое')),
    )
    
    customer = models.ForeignKey(Customer, on_delete=models.CASCADE, related_name='interactions', verbose_name=_('Клиент'))
    interaction_type = models.CharField(max_length=10, choices=INTERACTION_TYPE_CHOICES, verbose_name=_('Тип взаимодействия'))
    date = models.DateTimeField(verbose_name=_('Дата и время'))
    subject = models.CharField(max_length=255, verbose_name=_('Тема'))
    description = models.TextField(verbose_name=_('Описание'))
    
    class Meta:
        verbose_name = _('Взаимодействие с клиентом')
        verbose_name_plural = _('Взаимодействия с клиентами')
        ordering = ['-date']
    
    def __str__(self):
        return f"{self.customer} - {self.get_interaction_type_display()} - {self.date}"


class Lead(TimeStampedModel, ContactInfo):
    """
    Модель для потенциального клиента (лида)
    """
    LEAD_SOURCE_CHOICES = (
        ('website', _('Сайт')),
        ('social_media', _('Социальные сети')),
        ('advertisement', _('Реклама')),
        ('referral', _('Рекомендация')),
        ('direct_contact', _('Прямой контакт')),
        ('other', _('Другое')),
    )
    
    LEAD_STATUS_CHOICES = (
        ('new', _('Новый')),
        ('contacted', _('На связи')),
        ('qualified', _('Квалифицирован')),
        ('unqualified', _('Не квалифицирован')),
        ('negotiation', _('В переговорах')),
        ('won', _('Успешно')),
        ('lost', _('Потерян')),
    )
    
    first_name = models.CharField(max_length=100, verbose_name=_('Имя'))
    last_name = models.CharField(max_length=100, verbose_name=_('Фамилия'))
    source = models.CharField(max_length=20, choices=LEAD_SOURCE_CHOICES, verbose_name=_('Источник'))
    status = models.CharField(max_length=20, choices=LEAD_STATUS_CHOICES, default='new', verbose_name=_('Статус'))
    interested_in = models.TextField(blank=True, null=True, verbose_name=_('Интересующие продукты'))
    notes = models.TextField(blank=True, null=True, verbose_name=_('Примечания'))
    estimated_sale_probability = models.IntegerField(default=0, verbose_name=_('Вероятность продажи (%)'))
    
    class Meta:
        verbose_name = _('Лид')
        verbose_name_plural = _('Лиды')
        ordering = ['-created_at']
    
    def __str__(self):
        return f"{self.last_name} {self.first_name} - {self.get_status_display()}"

```

```python
# backend/vehicles/models.py
from django.db import models
from django.utils.translation import gettext_lazy as _
from core.models import TimeStampedModel

class Brand(TimeStampedModel):
    """
    Модель бренда автомобиля
    """
    name = models.CharField(max_length=100, unique=True, verbose_name=_('Название'))
    country = models.CharField(max_length=100, verbose_name=_('Страна производитель'))
    logo = models.ImageField(upload_to='brands/', blank=True, null=True, verbose_name=_('Логотип'))
    description = models.TextField(blank=True, null=True, verbose_name=_('Описание'))
    
    class Meta:
        verbose_name = _('Бренд')
        verbose_name_plural = _('Бренды')
        ordering = ['name']
    
    def __str__(self):
        return self.name


class Model(TimeStampedModel):
    """
    Модель автомобиля
    """
    BODY_TYPE_CHOICES = (
        ('sedan', _('Седан')),
        ('hatchback', _('Хэтчбек')),
        ('suv', _('Внедорожник')),
        ('wagon', _('Универсал')),
        ('coupe', _('Купе')),
        ('convertible', _('Кабриолет')),
        ('pickup', _('Пикап')),
        ('van', _('Фургон')),
        ('minivan', _('Минивэн')),
    )
    
    brand = models.ForeignKey(Brand, on_delete=models.CASCADE, related_name='models', verbose_name=_('Бренд'))
    name = models.CharField(max_length=100, verbose_name=_('Название'))
    body_type = models.CharField(max_length=20, choices=BODY_TYPE_CHOICES, verbose_name=_('Тип кузова'))
    image = models.ImageField(upload_to='models/', blank=True, null=True, verbose_name=_('Изображение'))
    description = models.TextField(blank=True, null=True, verbose_name=_('Описание'))
    
    class Meta:
        verbose_name = _('Модель')
        verbose_name_plural = _('Модели')
        ordering = ['brand', 'name']
        unique_together = ['brand', 'name']
    
    def __str__(self):
        return f"{self.brand} {self.name}"


class ModelYear(TimeStampedModel):
    """
    Модель года выпуска автомобиля
    """
    model = models.ForeignKey(Model, on_delete=models.CASCADE, related_name='years', verbose_name=_('Модель'))
    year = models.PositiveIntegerField(verbose_name=_('Год выпуска'))
    
    class Meta:
        verbose_name = _('Год выпуска')
        verbose_name_plural = _('Годы выпуска')
        ordering = ['-year']
        unique_together = ['model', 'year']
    
    def __str__(self):
        return f"{self.model} {self.year}"


class Trim(TimeStampedModel):
    """
    Модель комплектации автомобиля
    """
    model_year = models.ForeignKey(ModelYear, on_delete=models.CASCADE, related_name='trims', verbose_name=_('Модель и год'))
    name = models.CharField(max_length=100, verbose_name=_('Название комплектации'))
    description = models.TextField(blank=True, null=True, verbose_name=_('Описание'))
    
    # Технические характеристики
    engine_type = models.CharField(max_length=100, verbose_name=_('Тип двигателя'))
    engine_capacity = models.DecimalField(max_digits=5, decimal_places=1, verbose_name=_('Объем двигателя (л)'))
    horsepower = models.IntegerField(verbose_name=_('Мощность (л.с.)'))
    torque = models.IntegerField(verbose_name=_('Крутящий момент (Нм)'))
    transmission = models.CharField(max_length=100, verbose_name=_('Коробка передач'))
    fuel_type = models.CharField(max_length=50, verbose_name=_('Тип топлива'))
    fuel_consumption_city = models.DecimalField(max_digits=4, decimal_places=1, verbose_name=_('Расход топлива город (л/100км)'))
    fuel_consumption_highway = models.DecimalField(max_digits=4, decimal_places=1, verbose_name=_('Расход топлива трасса (л/100км)'))
    fuel_consumption_combined = models.DecimalField(max_digits=4, decimal_places=1, verbose_name=_('Расход топлива смешанный (л/100км)'))
    acceleration = models.DecimalField(max_digits=4, decimal_places=1, verbose_name=_('Разгон 0-100 км/ч (с)'))
    
    class Meta:
        verbose_name = _('Комплектация')
        verbose_name_plural = _('Комплектации')
        ordering = ['model_year', 'name']
        unique_together = ['model_year', 'name']
    
    def __str__(self):
        return f"{self.model_year} {self.name}"


class Color(TimeStampedModel):
    """
    Модель цвета автомобиля
    """
    name = models.CharField(max_length=100, verbose_name=_('Название'))
    hex_code = models.CharField(max_length=7, verbose_name=_('HEX код'))
    
    class Meta:
        verbose_name = _('Цвет')
        verbose_name_plural = _('Цвета')
        ordering = ['name']
    
    def __str__(self):
        return self.name


class Vehicle(TimeStampedModel):
    """
    Модель конкретного автомобиля
    """
    VEHICLE_STATUS_CHOICES = (
        ('available', _('В наличии')),
        ('reserved', _('Зарезервирован')),
        ('sold', _('Продан')),
        ('in_transit', _('В пути')),
        ('service', _('На обслуживании')),
        ('ordered', _('Заказан')),
    )
    
    trim = models.ForeignKey(Trim, on_delete=models.CASCADE, related_name='vehicles', verbose_name=_('Комплектация'))
    color = models
```
