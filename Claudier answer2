Понимаю, для быстрого старта выбираем монолитный подход с Django и TailwindCSS. Подготовлю базовый код проекта, который послужит отправной точкой для развертывания CRM-системы автодилера.

```markdown
# CRM система для автодилера - монолитная архитектура на Django

## Обзор проекта

Проект представляет собой монолитное веб-приложение на Django с фронтендом на React + TailwindCSS. 
Структура проекта организована в виде отдельных Django-приложений для каждого функционального модуля CRM.

## Структура проекта

```
car_dealer_crm/
├── docker/
│   ├── docker-compose.yml         # Конфигурация Docker Compose
│   ├── Dockerfile                 # Dockerfile для Python
│   ├── Dockerfile.frontend        # Dockerfile для фронтенда
│   └── nginx/                     # Конфигурация Nginx
├── backend/
│   ├── car_dealer_crm/            # Основной проект Django
│   │   ├── __init__.py
│   │   ├── settings.py            # Настройки проекта
│   │   ├── urls.py                # Маршрутизация URL
│   │   ├── wsgi.py                # WSGI приложение
│   │   └── asgi.py                # ASGI приложение
│   ├── customers/                 # Приложение для работы с клиентами
│   │   ├── migrations/
│   │   ├── api/                   # API эндпоинты
│   │   ├── models.py              # Модели данных
│   │   ├── serializers.py         # Сериализаторы для API
│   │   └── views.py               # Обработчики представлений
│   ├── vehicles/                  # Приложение для работы с автомобилями
│   │   ├── migrations/
│   │   ├── api/
│   │   ├── models.py
│   │   ├── serializers.py
│   │   └── views.py
│   ├── sales/                     # Приложение для работы с продажами
│   │   ├── migrations/
│   │   ├── api/
│   │   ├── models.py
│   │   ├── serializers.py
│   │   └── views.py
│   ├── marketing/                 # Приложение для маркетинга
│   │   ├── migrations/
│   │   ├── api/
│   │   ├── models.py
│   │   ├── serializers.py
│   │   └── views.py
│   ├── service/                   # Приложение для сервисного обслуживания
│   │   ├── migrations/
│   │   ├── api/
│   │   ├── models.py
│   │   ├── serializers.py
│   │   └── views.py
│   ├── finance/                   # Приложение для финансов
│   │   ├── migrations/
│   │   ├── api/
│   │   ├── models.py
│   │   ├── serializers.py
│   │   └── views.py
│   ├── analytics/                 # Приложение для аналитики
│   │   ├── migrations/
│   │   ├── api/
│   │   ├── models.py
│   │   ├── serializers.py
│   │   └── views.py
│   ├── employees/                 # Приложение для управления сотрудниками
│   │   ├── migrations/
│   │   ├── api/
│   │   ├── models.py
│   │   ├── serializers.py
│   │   └── views.py
│   ├── core/                      # Ядро приложения, общие компоненты
│   │   ├── migrations/
│   │   ├── api/
│   │   ├── models.py
│   │   ├── serializers.py
│   │   └── views.py
│   ├── manage.py                  # Утилита управления Django
│   └── requirements.txt           # Зависимости Python
├── frontend/
│   ├── public/
│   ├── src/
│   │   ├── components/            # React компоненты
│   │   │   ├── customers/
│   │   │   ├── vehicles/
│   │   │   ├── sales/
│   │   │   ├── marketing/
│   │   │   ├── service/
│   │   │   ├── finance/
│   │   │   ├── analytics/
│   │   │   ├── employees/
│   │   │   └── common/
│   │   ├── pages/                 # Страницы приложения
│   │   ├── services/              # Сервисы API
│   │   ├── store/                 # Redux store
│   │   ├── utils/                 # Утилиты
│   │   ├── App.js                 # Основной компонент
│   │   └── index.js               # Точка входа
│   ├── package.json               # NPM-зависимости
│   ├── tailwind.config.js         # Конфигурация TailwindCSS
│   └── postcss.config.js          # Конфигурация PostCSS
└── README.md                      # Документация проекта
```

## Основные файлы для запуска проекта

Ниже приведены основные файлы, необходимые для запуска проекта:

```

```yaml
# docker-compose.yml
version: '3.8'

services:
  db:
    image: postgres:14
    volumes:
      - postgres_data:/var/lib/postgresql/data/
    env_file:
      - ./.env
    environment:
      - POSTGRES_PASSWORD=${DB_PASSWORD}
      - POSTGRES_USER=${DB_USER}
      - POSTGRES_DB=${DB_NAME}
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER} -d ${DB_NAME}"]
      interval: 10s
      timeout: 5s
      retries: 5

  redis:
    image: redis:6-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data

  backend:
    build:
      context: .
      dockerfile: docker/Dockerfile
    command: >
      sh -c "python manage.py wait_for_db &&
             python manage.py migrate &&
             python manage.py runserver 0.0.0.0:8000"
    volumes:
      - ./backend:/app
    ports:
      - "8000:8000"
    env_file:
      - ./.env
    depends_on:
      - db
      - redis

  celery:
    build:
      context: .
      dockerfile: docker/Dockerfile
    command: celery -A car_dealer_crm worker -l info
    volumes:
      - ./backend:/app
    env_file:
      - ./.env
    depends_on:
      - db
      - redis
      - backend

  celery-beat:
    build:
      context: .
      dockerfile: docker/Dockerfile
    command: celery -A car_dealer_crm beat -l info
    volumes:
      - ./backend:/app
    env_file:
      - ./.env
    depends_on:
      - db
      - redis
      - backend

  frontend:
    build:
      context: .
      dockerfile: docker/Dockerfile.frontend
    volumes:
      - ./frontend:/app
      - /app/node_modules
    ports:
      - "3000:3000"
    depends_on:
      - backend
    environment:
      - NODE_ENV=development
      - REACT_APP_API_URL=http://localhost:8000/api

volumes:
  postgres_data:
  redis_data:

```

```dockerfile
# Dockerfile для бэкенда
# docker/Dockerfile
FROM python:3.10-slim

WORKDIR /app

ENV PYTHONDONTWRITEBYTECODE 1
ENV PYTHONUNBUFFERED 1

# Установка системных зависимостей
RUN apt-get update && apt-get install -y --no-install-recommends \
    build-essential \
    libpq-dev \
    && apt-get clean \
    && rm -rf /var/lib/apt/lists/*

# Установка зависимостей Python
COPY backend/requirements.txt /app/
RUN pip install --no-cache-dir -r requirements.txt

# Копирование проекта
COPY backend/ /app/

# Предоставление прав на исполнение скриптов
RUN chmod +x /app/entrypoint.sh

ENTRYPOINT ["/app/entrypoint.sh"]

# Dockerfile для фронтенда
# docker/Dockerfile.frontend
FROM node:16-alpine

WORKDIR /app

COPY frontend/package.json frontend/package-lock.json* ./

RUN npm install

COPY frontend/ ./

CMD ["npm", "start"]

```

```text
# backend/requirements.txt
Django==4.2.3
djangorestframework==3.14.0
djangorestframework-simplejwt==5.2.2
django-cors-headers==4.1.0
django-filter==23.2
psycopg2==2.9.6
celery==5.3.1
redis==4.6.0
drf-yasg==1.21.6
django-celery-beat==2.5.0
Pillow==10.0.0
gunicorn==20.1.0
django-storages==1.13.2
sentry-sdk==1.28.1
pytest==7.4.0
pytest-django==4.5.2
factory-boy==3.2.1
django-extensions==3.2.3

```

```text
# .env
DEBUG=True
SECRET_KEY=your-secret-key-here
ALLOWED_HOSTS=localhost,127.0.0.1

# База данных
DB_NAME=car_dealer_crm
DB_USER=postgres
DB_PASSWORD=postgres
DB_HOST=db
DB_PORT=5432

# Redis
REDIS_URL=redis://redis:6379/0

# Email
EMAIL_HOST=smtp.gmail.com
EMAIL_PORT=587
EMAIL_USE_TLS=True
EMAIL_HOST_USER=your-email@example.com
EMAIL_HOST_PASSWORD=your-email-password

# JWT
JWT_SECRET_KEY=your-jwt-secret-key
JWT_ACCESS_TOKEN_LIFETIME=1  # в часах
JWT_REFRESH_TOKEN_LIFETIME=24  # в часах

```

```python
# backend/car_dealer_crm/settings.py
import os
from datetime import timedelta
from pathlib import Path

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.environ.get('SECRET_KEY', 'django-insecure-key')

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = os.environ.get('DEBUG', 'False') == 'True'

ALLOWED_HOSTS = os.environ.get('ALLOWED_HOSTS', 'localhost,127.0.0.1').split(',')

# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    
    # Сторонние приложения
    'rest_framework',
    'rest_framework_simplejwt',
    'corsheaders',
    'django_filters',
    'drf_yasg',
    'django_celery_beat',
    'django_extensions',
    
    # Наши приложения
    'core',
    'customers',
    'vehicles',
    'sales',
    'marketing',
    'service',
    'finance',
    'analytics',
    'employees',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'car_dealer_crm.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'car_dealer_crm.wsgi.application'

# Database
# https://docs.djangoproject.com/en/4.2/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql',
        'NAME': os.environ.get('DB_NAME', 'car_dealer_crm'),
        'USER': os.environ.get('DB_USER', 'postgres'),
        'PASSWORD': os.environ.get('DB_PASSWORD', 'postgres'),
        'HOST': os.environ.get('DB_HOST', 'db'),
        'PORT': os.environ.get('DB_PORT', '5432'),
    }
}

# Password validation
# https://docs.djangoproject.com/en/4.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    
```
