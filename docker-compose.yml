# docker-compose.yml
version: '3.8'

services:
  db:
    image: postgres:14
    volumes:
      - postgres_data:/var/lib/postgresql/data/
    env_file:
      - ./.env
    environment:
      - POSTGRES_PASSWORD=${DB_PASSWORD}
      - POSTGRES_USER=${DB_USER}
      - POSTGRES_DB=${DB_NAME}
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER} -d ${DB_NAME}"]
      interval: 10s
      timeout: 5s
      retries: 5

  redis:
    image: redis:6-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data

  backend:
    build:
      context: .
      dockerfile: docker/Dockerfile
    command: >
      sh -c "python manage.py wait_for_db &&
             python manage.py migrate &&
             python manage.py runserver 0.0.0.0:8000"
    volumes:
      - ./backend:/app
    ports:
      - "8000:8000"
    env_file:
      - ./.env
    depends_on:
      - db
      - redis

  celery:
    build:
      context: .
      dockerfile: docker/Dockerfile
    command: celery -A car_dealer_crm worker -l info
    volumes:
      - ./backend:/app
    env_file:
      - ./.env
    depends_on:
      - db
      - redis
      - backend

  celery-beat:
    build:
      context: .
      dockerfile: docker/Dockerfile
    command: celery -A car_dealer_crm beat -l info
    volumes:
      - ./backend:/app
    env_file:
      - ./.env
    depends_on:
      - db
      - redis
      - backend

  frontend:
    build:
      context: .
      dockerfile: docker/Dockerfile.frontend
    volumes:
      - ./frontend:/app
      - /app/node_modules
    ports:
      - "3000:3000"
    depends_on:
      - backend
    environment:
      - NODE_ENV=development
      - REACT_APP_API_URL=http://localhost:8000/api

volumes:
  postgres_data:
  redis_data:
